const technicianSubscriptionService = require('../services/technicianSubscriptionService');
// const HttpError = require('../utils/error');

// üìå L·∫•y c√°c g√≥i c√≥ th·ªÉ ƒëƒÉng k√Ω
exports.getAvailablePackages = async (req, res) => {
    try {
        const packages = await technicianSubscriptionService.getAvailablePackages();
        res.status(200).json({
            message: 'L·∫•y danh s√°ch g√≥i kh·∫£ d·ª•ng th√†nh c√¥ng',
            data: packages
        });
    } catch (error) {
        console.error('Error getting available packages:', error);
        res.status(500).json({
            message: 'L·ªói server khi l·∫•y g√≥i kh·∫£ d·ª•ng',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
};

// üìå ƒêƒÉng k√Ω g√≥i m·ªõi
exports.subscribePackage = async (req, res) => {
    try {
        const { technicianId, packageId, paymentMethod } = req.body;
        const subscription = await technicianSubscriptionService.subscribePackage(
            technicianId, packageId, paymentMethod
        );

        res.status(201).json({
            message: 'ƒêƒÉng k√Ω g√≥i th√†nh c√¥ng',
            data: subscription
        });
    } catch (error) {
        console.error('Error subscribing package:', error);
        res.status(500).json({
            message: 'L·ªói server khi ƒëƒÉng k√Ω g√≥i',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
};


// üìå Gia h·∫°n g√≥i
exports.renewSubscription = async (req, res) => {
    try {
        const technicianId = req.user.id;

        const subscription = await technicianSubscriptionService.renewSubscription(technicianId);

        res.status(200).json({
            message: 'Gia h·∫°n g√≥i th√†nh c√¥ng',
            data: subscription
        });
    } catch (error) {
        console.error('Error renewing subscription:', error);
        res.status(error.statusCode || 500).json({
            message: error.message || 'L·ªói server khi gia h·∫°n g√≥i'
        });
    }
};

// üìå L·∫•y g√≥i hi·ªán t·∫°i c·ªßa technician
exports.getCurrentSubscription = async (req, res) => {
    try {
        const technicianId = req.params.technicianId;

        const subscription = await technicianSubscriptionService.getCurrentSubscription(technicianId);

        res.status(200).json({
            message: 'L·∫•y g√≥i hi·ªán t·∫°i th√†nh c√¥ng',
            data: subscription
        });
    } catch (error) {
        console.error('Error getting current subscription:', error);
        res.status(error.statusCode || 500).json({
            message: error.message || 'L·ªói server khi l·∫•y g√≥i hi·ªán t·∫°i'
        });
    }
};
