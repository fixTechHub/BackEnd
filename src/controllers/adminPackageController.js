const adminPackageService = require('../services/adminPackageService');

// üìå L·∫•y danh s√°ch g√≥i
exports.getAllPackages = async (req, res) => {
    try {
        const packages = await adminPackageService.getAllPackages();
        res.status(200).json({
            message: 'L·∫•y danh s√°ch g√≥i th√†nh c√¥ng',
            data: packages
        });
    } catch (error) {
        console.error('Error getting packages:', error);
        res.status(500).json({
            message: 'L·ªói server khi l·∫•y g√≥i',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
};

// üìå T·∫°o g√≥i m·ªõi
exports.createPackage = async (req, res) => {
    try {
        const pkg = await adminPackageService.createPackage(req.body);
        res.status(201).json({
            message: 'T·∫°o g√≥i th√†nh c√¥ng',
            data: pkg
        });
    } catch (error) {
        console.error('Error creating package:', error);
        res.status(500).json({
            message: 'L·ªói server khi t·∫°o g√≥i',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
};

// üìå C·∫≠p nh·∫≠t g√≥i
// exports.updatePackage = async (req, res) => {
//     try {
//         const pkg = await adminPackageService.updatePackage(req.params.id, req.body);
//         res.status(200).json({
//             message: 'C·∫≠p nh·∫≠t g√≥i th√†nh c√¥ng',
//             data: pkg
//         });
//     } catch (error) {
//         console.error('Error updating package:', error);
//         res.status(500).json({
//             message: 'L·ªói server khi c·∫≠p nh·∫≠t g√≥i',
//             error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
//         });
//     }
// };

exports.updatePackage = async (req, res) => {
    try {
        // L·∫•y _id t·ª´ body
        const { id } = req.params;  // ‚úÖ l·∫•y id t·ª´ param
        const updateData = req.body;

        const pkg = await adminPackageService.updatePackage(id, updateData);

        if (!pkg) {
            return res.status(404).json({
                message: 'Kh√¥ng t√¨m th·∫•y g√≥i ƒë·ªÉ c·∫≠p nh·∫≠t'
            });
        }

        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t g√≥i th√†nh c√¥ng',
            data: pkg
        });
    } catch (error) {
        console.error('Error updating package:', error);
        res.status(500).json({
            message: 'L·ªói server khi c·∫≠p nh·∫≠t g√≥i',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
};


// üìå X√≥a g√≥i
exports.deletePackage = async (req, res) => {
    try {
        const pkg = await adminPackageService.deletePackage(req.params.id);
        res.status(200).json({
            message: 'X√≥a g√≥i th√†nh c√¥ng',
            data: pkg
        });
    } catch (error) {
        console.error('Error deleting package:', error);
        res.status(500).json({
            message: 'L·ªói server khi x√≥a g√≥i',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
};

// üìå B·∫≠t/T·∫Øt g√≥i
exports.togglePackage = async (req, res) => {
    try {
        const pkg = await adminPackageService.togglePackage(req.params.id);
        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i g√≥i th√†nh c√¥ng',
            data: pkg
        });
    } catch (error) {
        console.error('Error toggling package:', error);
        res.status(500).json({
            message: 'L·ªói server khi b·∫≠t/t·∫Øt g√≥i',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
};
